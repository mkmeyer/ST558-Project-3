{
  "hash": "435833d4fefc2d4cc46bfe7bd3ed7fe4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Modeling\"\nformat: html\neditor: visual\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Loading packages\nlibrary(\"tidyverse\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'ggplot2' was built under R version 4.3.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'tibble' was built under R version 4.3.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'purrr' was built under R version 4.3.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'lubridate' was built under R version 4.3.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(\"tidymodels\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'tidymodels' was built under R version 4.3.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRegistered S3 method overwritten by 'future':\n  method               from      \n  all.equal.connection parallelly\n── Attaching packages ────────────────────────────────────── tidymodels 1.3.0 ──\n✔ broom        1.0.8     ✔ rsample      1.3.0\n✔ dials        1.4.0     ✔ tune         1.3.0\n✔ infer        1.0.9     ✔ workflows    1.2.0\n✔ modeldata    1.4.0     ✔ workflowsets 1.1.1\n✔ parsnip      1.3.2     ✔ yardstick    1.3.2\n✔ recipes      1.3.1     \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'broom' was built under R version 4.3.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'dials' was built under R version 4.3.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'scales' was built under R version 4.3.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'infer' was built under R version 4.3.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'modeldata' was built under R version 4.3.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'parsnip' was built under R version 4.3.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'recipes' was built under R version 4.3.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'rsample' was built under R version 4.3.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'tune' was built under R version 4.3.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'workflows' was built under R version 4.3.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'workflowsets' was built under R version 4.3.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'yardstick' was built under R version 4.3.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(\"caret\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'caret' was built under R version 4.3.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: lattice\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'lattice' was built under R version 4.3.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'caret'\n\nThe following objects are masked from 'package:yardstick':\n\n    precision, recall, sensitivity, specificity\n\nThe following object is masked from 'package:purrr':\n\n    lift\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(\"yardstick\")\nlibrary(\"baguette\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'baguette' was built under R version 4.3.3\n```\n\n\n:::\n:::\n\n\n\nLoading in the cleaned data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Reading in the data\ndiabetes_data <- read.csv(\"diabetes_binary_health_indicators_BRFSS2015.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Selecting response and 3 chosen explanatory variables\n#Converting categorical variables from numeric variables to factor variables\ndiabetes_select <- diabetes_data |>\n  rename(\"diabetes_resp\" = Diabetes_binary) |>\n  rename(\"bmi\" = BMI) |>\n  rename(\"physical_activity\" = PhysActivity) |>\n  rename(\"age\" = Age) |>\n  mutate(diabetes_resp = factor(diabetes_resp, levels = c(0, 1), labels = c(\"No diabetes\", \"Prediabetes or diabetes\"))) |>\n  mutate(physical_activity = factor(physical_activity, levels = c(0, 1), labels = c(\"No physical activity\", \"Physical activity\"))) |>\n  mutate(age = factor(age, levels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13), labels = c(\"Age 18-24\", \"Age 25-29\", \"Age 30-34\", \"Age 35-39\", \"Age 40-44\", \"Age 45-49\", \"Age 50-54\", \"Age 55-59\", \"Age 60-64\", \"Age 65-69\", \"Age 70-74\", \"Age 75-79\", \"Age 80 or older\"))) |>\n  mutate(HvyAlcoholConsump = as.factor(HvyAlcoholConsump)) |>\n  mutate(AnyHealthcare = as.factor(AnyHealthcare))\n```\n:::\n\n\n\n## Introduction\n\n## Modeling\n\n### Splitting Data into Training and Testing\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\ndiabetes_split <- initial_split(diabetes_select, prop = 0.70) #specifying a 70/30 split\ndiabetes_train <- training(diabetes_split) #splitting training data\ndiabetes_test <- testing(diabetes_split) #splitting testing data\n\ndiabetes_folds <- vfold_cv(diabetes_train, 5) #creating 10 fold CV of the training data\n```\n:::\n\n\n\n### Logistic Regression Models\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Creating the spec for logistic models\nLR_spec <- logistic_reg() |>\n  set_engine(\"glm\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Creating the first logistic model using \n#Resting Blood Pressure, Sex, and Cholesterol as predictors\nLR1_rec <- recipe(diabetes_resp ~ physical_activity + bmi + age + HvyAlcoholConsump + AnyHealthcare, data = diabetes_train) |>\n  step_normalize(bmi) |>\n  step_dummy(physical_activity, age, HvyAlcoholConsump, AnyHealthcare)\n\nLR1_wkf <- workflow() |>\n  add_recipe(LR1_rec) |>\n  add_model(LR_spec)\n\nLR1_fit <- LR1_wkf |>\n  fit_resamples(diabetes_folds, metrics = metric_set(mn_log_loss))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Creating the first logistic model using \n#Max heart rate, Age, and Sex as predictors\nLR2_rec <- recipe(diabetes_resp ~ bmi + physical_activity + HvyAlcoholConsump + AnyHealthcare, data = diabetes_train) |>\n  step_dummy(physical_activity, HvyAlcoholConsump, AnyHealthcare)\n\nLR2_wkf <- workflow() |>\n  add_recipe(LR2_rec) |>\n  add_model(LR_spec)\n\nLR2_fit <- LR2_wkf |>\n  fit_resamples(diabetes_folds, metrics = metric_set(mn_log_loss))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Creating the first logistic model using \n#Max heart rate, Age, and Sex as predictors\nLR3_rec <- recipe(diabetes_resp ~ bmi + physical_activity + age, data = diabetes_train) |>\n  step_normalize(bmi) |>\n  step_dummy(physical_activity, age)\n\nLR3_wkf <- workflow() |>\n  add_recipe(LR3_rec) |>\n  add_model(LR_spec)\n\nLR3_fit <- LR3_wkf |>\n  fit_resamples(diabetes_folds, metrics = metric_set(mn_log_loss))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrbind(LR1_fit |> collect_metrics(),\n      LR2_fit |> collect_metrics(),\n      LR3_fit |> collect_metrics()) |>\n  mutate(Model = c(\"Model1\", \"Model2\", \"Model3\")) |>\n  select(Model, everything())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 7\n  Model  .metric     .estimator  mean     n std_err .config             \n  <chr>  <chr>       <chr>      <dbl> <int>   <dbl> <chr>               \n1 Model1 mn_log_loss binary     0.357     5 0.00192 Preprocessor1_Model1\n2 Model2 mn_log_loss binary     0.379     5 0.00204 Preprocessor1_Model1\n3 Model3 mn_log_loss binary     0.359     5 0.00182 Preprocessor1_Model1\n```\n\n\n:::\n:::\n\n\n\n### Classification Tree\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# tree_rec <- recipe(diabetes_resp ~ ., data = diabetes_train) |>\n#   step_dummy(physical_activity, HvyAlcoholConsump, AnyHealthcare) |>\n#   step_normalize(bmi, -all_outcomes())\n# \n# tree_mod <- decision_tree(tree_depth = tune(), min_n = 200, cost_complexity = tune()) |>\n#   set_engine(\"rpart\") |>\n#   set_mode(\"classification\")\n# \n# tree_wkf <- workflow() |>\n#   add_recipe(tree_rec) |>\n#   add_model(tree_mod)\n# \n# tree_grid <- grid_regular(cost_complexity(),\n#                           tree_depth(),\n#                           levels = c(10, 5))\n# \n# tree_fits <- tree_wkf |> \n#   tune_grid(resamples = diabetes_folds,\n#             grid = tree_grid, \n#             metrics = metric_set(mn_log_loss))\n# \n# tree_fits |> collect_metrics()\n```\n:::\n\n\n\n### Random Forest\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# rf_spec <- rand_forest(mtry = tune()) |>\n#   set_engine(\"ranger\") |>\n#   set_mode(\"classification\")\n# \n# rf_wkf <- workflow() |>\n#   add_recipe(LR1_rec) |>\n#   add_model(rf_spec)\n# \n# rf_fit <- rf_wkf |>\n#   tune_grid(resamples = diabetes_folds,\n#             grid = 7,\n#             metrics = metric_set(accuracy, mn_log_loss))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# rf_fit |>\n#   collect_metrics() |>\n#   filter(.metric == \"mn_log_loss\") |>\n#   arrange(mean)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# rf_fit |> \n#   collect_metrics() |>\n#   filter(.metric == \"mn_log_loss\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# rf_best_params <- select_best(rf_fit, metric = \"mn_log_loss\")\n# rf_best_params\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# rf_final_wkf <- rf_wkf |>\n#  finalize_workflow(rf_best_params)\n# rf_final_fit <- rf_final_wkf |>\n#  last_fit(diabetes_split, metrics = metric_set(mn_log_loss))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# rf_final_fit |> collect_metrics()\n```\n:::\n\n\n\n\n### Final Model Selection\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}