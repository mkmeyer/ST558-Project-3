[
  {
    "objectID": "EDA.html",
    "href": "EDA.html",
    "title": "EDA",
    "section": "",
    "text": "library(\"tidyverse\")"
  },
  {
    "objectID": "EDA.html#introduction",
    "href": "EDA.html#introduction",
    "title": "EDA",
    "section": "Introduction",
    "text": "Introduction\nIn this project, I analyze data on diabetes. These data are a subset of the Behavioral Risk Factor Surveillance System (BRFSS) which is an annual telephone survey conducted by the Centers for Disease Control (CDC). This subset includes responses from 253,680 people and was collected in 2015. This dataset contains information on whether the person does not have diabetes or if they have either pre-diabetes or diabetes, in addition to other numeric and categorical health indicators. There are binary, indicator variables describing whether or not the person has a history of high blood pressure, high cholesterol, smoking, stroke, coronary heart disease (CHD) or myocardial infarction (MI), physical activity in the past 30 days, daily fruit consumption, daily veggie consumption, alcohol consumption, healthcare coverage, missing medical care due to cost, and difficulty walking. There are also categorical variables with multiple levels describing the person’s general health, mental health, and physical health as well as demographic characteristics like sex, age, education, and income. There is also a numeric variable, BMI or body mass index, calculated by (weight in kg)/(height in meters)^2.\nThe goal of this project is to develop a good model to model and make predictions about whether or not a person has diabetes. According to a CDC article published in 2024 (https://www.cdc.gov/diabetes/risk-factors/index.html), being overweight or obese, being 45 or older, having a close relative with Type 2 diabetes, being physically active 3 or fewer times in a week, having non-alcoholic fatty liver disease (NAFLD), having gestational diabetes, or being an African American, Hispanic or Latino, American Indian, or Alaska Native person are main factors associated with prediabetes and Type 2 diabetes. In our dataset, we have access to BMI (overweight or obesity), physical activity, and age. I will explore the summary and distribution of those three variables (BMI, physical activity, and age)."
  },
  {
    "objectID": "EDA.html#data",
    "href": "EDA.html#data",
    "title": "EDA",
    "section": "Data",
    "text": "Data\n\nReading in the data\nFirst, we read in the data. The data has been downloaded and stored in my GitHub repository, but was originally sourced from Kaggle (https://www.kaggle.com/datasets/alexteboul/diabetes-health-indicators-dataset/data).\n\n#Reading in the data\ndiabetes_data &lt;- read.csv(\"diabetes_binary_health_indicators_BRFSS2015.csv\")\n\n\n\nCleaning the data\nNext, we clean and manipulate the data. We select the four variables we are most interested in which are the response variable (whether or not the person has been diagnosed with pre-diabetes or diabetes) and three explanatory variables. The explanatory variables are whether the person is physically active (a binary variable), the person’s BMI (a numeric variable), and the person’s age (a categorical variable with 13 levels corresponding to different age groups).\n\n#Selecting response and 3 chosen explanatory variables\n#Converting categorical variables from numeric variables to factor variables\ndiabetes_select &lt;- diabetes_data |&gt;\n  select(Diabetes_binary, BMI, PhysActivity, Age) |&gt;\n  rename(\"diabetes_resp\" = Diabetes_binary) |&gt;\n  rename(\"bmi\" = BMI) |&gt;\n  rename(\"phys_activity\" = PhysActivity) |&gt;\n  rename(\"age\" = Age) |&gt;\n  mutate(diabetes_resp = factor(diabetes_resp, levels = c(0, 1), \n                                labels = c(\"No diabetes\", \"Prediabetes or diabetes\"))) |&gt;\n  mutate(phys_activity = factor(phys_activity, levels = c(0, 1), \n                                    labels = c(\"No physical activity\", \"Physical activity\"))) |&gt;\n  mutate(age = factor(age, levels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13), \n                      labels = c(\"Age 18-24\", \"Age 25-29\", \"Age 30-34\", \"Age 35-39\", \n                                 \"Age 40-44\", \"Age 45-49\", \"Age 50-54\", \"Age 55-59\",\n                                 \"Age 60-64\", \"Age 65-69\", \"Age 70-74\", \"Age 75-79\", \n                                 \"Age 80 or older\")))\n\n\n\nChecking for Missingness\n\ncolSums(is.na(diabetes_select))\n\ndiabetes_resp           bmi phys_activity           age \n            0             0             0             0 \n\n\nAfter selecting our four variables, we check for missingness. None of our 4 variables have any missing values (hooray!) so we can proceed to further data visualizations and summaries."
  },
  {
    "objectID": "EDA.html#summarizations",
    "href": "EDA.html#summarizations",
    "title": "EDA",
    "section": "Summarizations",
    "text": "Summarizations\n\nUnivariate Explorations\nBefore looking at the bivariate relationship between the 3 explanatory variables and the response variable, whether or not the person has diabetes, we will look at each of the variables individually.\nFirst, we will look at BMI. BMI is a numeric variable that ranges from 12 to 98 and is calculated by (weight in kg)/(height in meters)^2.A summary of important statistics for BMI is below.\n\ndiabetes_select |&gt;\n  summarize(across(bmi, .fns = list(\"mean\" = mean,\n                                    \"median\" = median, \n                                    \"var\" = var,\n                                    \"sd\" = sd,\n                                    \"IQR\" = IQR), .names = \"{.col} {.fn}\"))\n\n  bmi mean bmi median  bmi var   bmi sd bmi IQR\n1 28.38236         27 43.67484 6.608694       7\n\n\nSecond, we will look at the variable for physical activity. This is a binary variable where the value of 1 indicates that the person had done some physical activity outside of their job in the last 30 days while a value of 0 indicates that they had not.\nThird, we will look at the last explanatory variable–age groups. This is a categorical variable with 13 levels each reflecting an age group. The 13 groups are: Age 18-24, Age 25-29, Age 30-34, Age 35-39, Age 40-44, Age 45-49, Age 50-54, Age 55-59, Age 60-64, Age 65-69, Age 70-74, Age 75-79, and Age 80 or older.\nFinally, we will look at the response variable. This variable describes whether or not the person has diabetes or prediabetes. A value of 1 means yes and a value of 0 means no.\n\n\nContingency Tables and Bar Charts\nWe will use contingency tables and bar charts to assess if there is a difference in diabetes rates at different levels of categorical variables.\nFirst, we will look at diabetes rates among people who do physical activity vs those who do not.\n\ndiabetes_select |&gt;\n  group_by(diabetes_resp, phys_activity) |&gt;\n  summarize(count = n()) |&gt;\n  mutate(percentage = count / sum(count) * 100) |&gt;\n  pivot_wider(names_from = phys_activity,\n              values_from = c(count, percentage),\n              names_glue = \"{phys_activity} {.value}\")\n\n# A tibble: 2 × 5\n# Groups:   diabetes_resp [2]\n  diabetes_resp           `No physical activity count` `Physical activity count`\n  &lt;fct&gt;                                          &lt;int&gt;                     &lt;int&gt;\n1 No diabetes                                    48701                    169633\n2 Prediabetes or diabetes                        13059                     22287\n# ℹ 2 more variables: `No physical activity percentage` &lt;dbl&gt;,\n#   `Physical activity percentage` &lt;dbl&gt;\n\n\n\n# Stacked barplot with multiple groups\nphys_act_groups &lt;- diabetes_select %&gt;%\n  group_by(phys_activity, \n           diabetes = factor(diabetes_resp, \n                             levels = c(\"No diabetes\", \"Prediabetes or diabetes\"))) %&gt;%\n  summarize(count = n(), .groups = \"drop\")\n\nggplot(data = phys_act_groups, \n       aes(x = phys_activity, y = count, fill = diabetes)) +\n  geom_bar(stat=\"identity\") +\n  labs(title = \"Diabetes and Physical Activity\", x = \"Physical Activity\", \n       y = \"Count\", fill = \"Diabetes Response\")\n\n\n\n\n\n\n\n\nNext, we will look at diabetes rates across the 13 different age groups.\n\ndiabetes_select |&gt;\n  group_by(diabetes_resp, age) |&gt;\n  summarize(count = n()) |&gt;\n  mutate(percentage = count / sum(count) * 100) |&gt;\n  pivot_wider(names_from = age,\n              values_from = c(count, percentage),\n              names_glue = \"{age} {.value}\")\n\n# A tibble: 2 × 27\n# Groups:   diabetes_resp [2]\n  diabetes_resp           `Age 18-24 count` `Age 25-29 count` `Age 30-34 count`\n  &lt;fct&gt;                               &lt;int&gt;             &lt;int&gt;             &lt;int&gt;\n1 No diabetes                          5622              7458             10809\n2 Prediabetes or diabetes                78               140               314\n# ℹ 23 more variables: `Age 35-39 count` &lt;int&gt;, `Age 40-44 count` &lt;int&gt;,\n#   `Age 45-49 count` &lt;int&gt;, `Age 50-54 count` &lt;int&gt;, `Age 55-59 count` &lt;int&gt;,\n#   `Age 60-64 count` &lt;int&gt;, `Age 65-69 count` &lt;int&gt;, `Age 70-74 count` &lt;int&gt;,\n#   `Age 75-79 count` &lt;int&gt;, `Age 80 or older count` &lt;int&gt;,\n#   `Age 18-24 percentage` &lt;dbl&gt;, `Age 25-29 percentage` &lt;dbl&gt;,\n#   `Age 30-34 percentage` &lt;dbl&gt;, `Age 35-39 percentage` &lt;dbl&gt;,\n#   `Age 40-44 percentage` &lt;dbl&gt;, `Age 45-49 percentage` &lt;dbl&gt;, …\n\n\n\n# Stacked barplot with multiple groups\nage_groups &lt;- diabetes_select %&gt;%\n  group_by(age, \n           diabetes = factor(diabetes_resp, levels = c(\"No diabetes\", \"Prediabetes or diabetes\"))) %&gt;%\n  summarize(count = n(), .groups = \"drop\")\n\nggplot(data = age_groups, aes(x = age, y = count, fill = diabetes)) +\n  geom_bar(stat=\"identity\") +\n  labs(title = \"Diabetes and Age Groups\", x = \"Age Group\", \n       y = \"Count\", fill = \"Diabetes Response\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\n\n\nSummarizing Center and Spread\n\ndiabetes_select |&gt;\n  group_by(diabetes_resp) |&gt;\n  summarize(across(bmi, .fns = list(\"mean\" = mean,\n                                    \"median\" = median, \n                                    \"var\" = var,\n                                    \"sd\" = sd,\n                                    \"IQR\" = IQR), .names = \"{.col} {.fn}\"))\n\n# A tibble: 2 × 6\n  diabetes_resp           `bmi mean` `bmi median` `bmi var` `bmi sd` `bmi IQR`\n  &lt;fct&gt;                        &lt;dbl&gt;        &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 No diabetes                   27.8           27      39.6     6.29         7\n2 Prediabetes or diabetes       31.9           31      54.2     7.36         8\n\n\n\n# Use semi-transparent fill\np &lt;- ggplot(diabetes_select, aes(x = bmi, fill = diabetes_resp)) +\n  geom_density(alpha=0.3) +\n  labs(title = \"BMI Distribution by Diabetes Diagnosis\", \n       x = \"BMI\", y = \"Density\", fill = \"Diabetes Diagnosis\")\np\n\n\n\n\n\n\n\n\nClick here for the Modeling Page"
  },
  {
    "objectID": "Modeling.html",
    "href": "Modeling.html",
    "title": "Modeling",
    "section": "",
    "text": "#Loading packages\nlibrary(\"tidyverse\")\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n\nWarning: package 'tibble' was built under R version 4.3.3\n\n\nWarning: package 'purrr' was built under R version 4.3.3\n\n\nWarning: package 'lubridate' was built under R version 4.3.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(\"tidymodels\")\n\nWarning: package 'tidymodels' was built under R version 4.3.3\n\n\nRegistered S3 method overwritten by 'future':\n  method               from      \n  all.equal.connection parallelly\n── Attaching packages ────────────────────────────────────── tidymodels 1.3.0 ──\n✔ broom        1.0.8     ✔ rsample      1.3.0\n✔ dials        1.4.0     ✔ tune         1.3.0\n✔ infer        1.0.9     ✔ workflows    1.2.0\n✔ modeldata    1.4.0     ✔ workflowsets 1.1.1\n✔ parsnip      1.3.2     ✔ yardstick    1.3.2\n✔ recipes      1.3.1     \n\n\nWarning: package 'broom' was built under R version 4.3.3\n\n\nWarning: package 'dials' was built under R version 4.3.3\n\n\nWarning: package 'scales' was built under R version 4.3.3\n\n\nWarning: package 'infer' was built under R version 4.3.3\n\n\nWarning: package 'modeldata' was built under R version 4.3.3\n\n\nWarning: package 'parsnip' was built under R version 4.3.3\n\n\nWarning: package 'recipes' was built under R version 4.3.3\n\n\nWarning: package 'rsample' was built under R version 4.3.3\n\n\nWarning: package 'tune' was built under R version 4.3.3\n\n\nWarning: package 'workflows' was built under R version 4.3.3\n\n\nWarning: package 'workflowsets' was built under R version 4.3.3\n\n\nWarning: package 'yardstick' was built under R version 4.3.3\n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n\nlibrary(\"caret\")\n\nWarning: package 'caret' was built under R version 4.3.3\n\n\nLoading required package: lattice\n\n\nWarning: package 'lattice' was built under R version 4.3.3\n\n\n\nAttaching package: 'caret'\n\nThe following objects are masked from 'package:yardstick':\n\n    precision, recall, sensitivity, specificity\n\nThe following object is masked from 'package:purrr':\n\n    lift\n\nlibrary(\"yardstick\")\nlibrary(\"baguette\")\n\nWarning: package 'baguette' was built under R version 4.3.3\nLoading in the cleaned data\n#Reading in the data\ndiabetes_data &lt;- read.csv(\"diabetes_binary_health_indicators_BRFSS2015.csv\")\n#Selecting response and 3 chosen explanatory variables\n#Converting categorical variables from numeric variables to factor variables\ndiabetes_select &lt;- diabetes_data |&gt;\n  rename(\"diabetes_resp\" = Diabetes_binary) |&gt;\n  rename(\"bmi\" = BMI) |&gt;\n  rename(\"physical_activity\" = PhysActivity) |&gt;\n  rename(\"age\" = Age) |&gt;\n  mutate(diabetes_resp = factor(diabetes_resp, levels = c(0, 1), labels = c(\"No diabetes\", \"Prediabetes or diabetes\"))) |&gt;\n  mutate(physical_activity = factor(physical_activity, levels = c(0, 1), labels = c(\"No physical activity\", \"Physical activity\"))) |&gt;\n  mutate(age = factor(age, levels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13), labels = c(\"Age 18-24\", \"Age 25-29\", \"Age 30-34\", \"Age 35-39\", \"Age 40-44\", \"Age 45-49\", \"Age 50-54\", \"Age 55-59\", \"Age 60-64\", \"Age 65-69\", \"Age 70-74\", \"Age 75-79\", \"Age 80 or older\"))) |&gt;\n  mutate(HvyAlcoholConsump = as.factor(HvyAlcoholConsump)) |&gt;\n  mutate(AnyHealthcare = as.factor(AnyHealthcare))"
  },
  {
    "objectID": "Modeling.html#introduction",
    "href": "Modeling.html#introduction",
    "title": "Modeling",
    "section": "Introduction",
    "text": "Introduction"
  },
  {
    "objectID": "Modeling.html#modeling",
    "href": "Modeling.html#modeling",
    "title": "Modeling",
    "section": "Modeling",
    "text": "Modeling\n\nSplitting Data into Training and Testing\n\nset.seed(1234)\n\ndiabetes_split &lt;- initial_split(diabetes_select, prop = 0.70) #specifying a 70/30 split\ndiabetes_train &lt;- training(diabetes_split) #splitting training data\ndiabetes_test &lt;- testing(diabetes_split) #splitting testing data\n\ndiabetes_folds &lt;- vfold_cv(diabetes_train, 5) #creating 10 fold CV of the training data\n\n\n\nLogistic Regression Models\n\n#Creating the spec for logistic models\nLR_spec &lt;- logistic_reg() |&gt;\n  set_engine(\"glm\")\n\n\n#Creating the first logistic model using \n#Resting Blood Pressure, Sex, and Cholesterol as predictors\nLR1_rec &lt;- recipe(diabetes_resp ~ physical_activity + bmi + age + HvyAlcoholConsump + AnyHealthcare, data = diabetes_train) |&gt;\n  step_normalize(bmi) |&gt;\n  step_dummy(physical_activity, age, HvyAlcoholConsump, AnyHealthcare)\n\nLR1_wkf &lt;- workflow() |&gt;\n  add_recipe(LR1_rec) |&gt;\n  add_model(LR_spec)\n\nLR1_fit &lt;- LR1_wkf |&gt;\n  fit_resamples(diabetes_folds, metrics = metric_set(mn_log_loss))\n\n\n#Creating the first logistic model using \n#Max heart rate, Age, and Sex as predictors\nLR2_rec &lt;- recipe(diabetes_resp ~ bmi + physical_activity + HvyAlcoholConsump + AnyHealthcare, data = diabetes_train) |&gt;\n  step_dummy(physical_activity, HvyAlcoholConsump, AnyHealthcare)\n\nLR2_wkf &lt;- workflow() |&gt;\n  add_recipe(LR2_rec) |&gt;\n  add_model(LR_spec)\n\nLR2_fit &lt;- LR2_wkf |&gt;\n  fit_resamples(diabetes_folds, metrics = metric_set(mn_log_loss))\n\n\n#Creating the first logistic model using \n#Max heart rate, Age, and Sex as predictors\nLR3_rec &lt;- recipe(diabetes_resp ~ bmi + physical_activity + age, data = diabetes_train) |&gt;\n  step_normalize(bmi) |&gt;\n  step_dummy(physical_activity, age)\n\nLR3_wkf &lt;- workflow() |&gt;\n  add_recipe(LR3_rec) |&gt;\n  add_model(LR_spec)\n\nLR3_fit &lt;- LR3_wkf |&gt;\n  fit_resamples(diabetes_folds, metrics = metric_set(mn_log_loss))\n\n\nrbind(LR1_fit |&gt; collect_metrics(),\n      LR2_fit |&gt; collect_metrics(),\n      LR3_fit |&gt; collect_metrics()) |&gt;\n  mutate(Model = c(\"Model1\", \"Model2\", \"Model3\")) |&gt;\n  select(Model, everything())\n\n# A tibble: 3 × 7\n  Model  .metric     .estimator  mean     n std_err .config             \n  &lt;chr&gt;  &lt;chr&gt;       &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 Model1 mn_log_loss binary     0.357     5 0.00192 Preprocessor1_Model1\n2 Model2 mn_log_loss binary     0.379     5 0.00204 Preprocessor1_Model1\n3 Model3 mn_log_loss binary     0.359     5 0.00182 Preprocessor1_Model1\n\n\n\n\nClassification Tree\n\n# tree_rec &lt;- recipe(diabetes_resp ~ ., data = diabetes_train) |&gt;\n#   step_dummy(physical_activity, HvyAlcoholConsump, AnyHealthcare) |&gt;\n#   step_normalize(bmi, -all_outcomes())\n# \n# tree_mod &lt;- decision_tree(tree_depth = tune(), min_n = 200, cost_complexity = tune()) |&gt;\n#   set_engine(\"rpart\") |&gt;\n#   set_mode(\"classification\")\n# \n# tree_wkf &lt;- workflow() |&gt;\n#   add_recipe(tree_rec) |&gt;\n#   add_model(tree_mod)\n# \n# tree_grid &lt;- grid_regular(cost_complexity(),\n#                           tree_depth(),\n#                           levels = c(10, 5))\n# \n# tree_fits &lt;- tree_wkf |&gt; \n#   tune_grid(resamples = diabetes_folds,\n#             grid = tree_grid, \n#             metrics = metric_set(mn_log_loss))\n# \n# tree_fits |&gt; collect_metrics()\n\n\n\nRandom Forest\n\n# rf_spec &lt;- rand_forest(mtry = tune()) |&gt;\n#   set_engine(\"ranger\") |&gt;\n#   set_mode(\"classification\")\n# \n# rf_wkf &lt;- workflow() |&gt;\n#   add_recipe(LR1_rec) |&gt;\n#   add_model(rf_spec)\n# \n# rf_fit &lt;- rf_wkf |&gt;\n#   tune_grid(resamples = diabetes_folds,\n#             grid = 7,\n#             metrics = metric_set(accuracy, mn_log_loss))\n\n\n# rf_fit |&gt;\n#   collect_metrics() |&gt;\n#   filter(.metric == \"mn_log_loss\") |&gt;\n#   arrange(mean)\n\n\n# rf_fit |&gt; \n#   collect_metrics() |&gt;\n#   filter(.metric == \"mn_log_loss\")\n\n\n# rf_best_params &lt;- select_best(rf_fit, metric = \"mn_log_loss\")\n# rf_best_params\n\n\n# rf_final_wkf &lt;- rf_wkf |&gt;\n#  finalize_workflow(rf_best_params)\n# rf_final_fit &lt;- rf_final_wkf |&gt;\n#  last_fit(diabetes_split, metrics = metric_set(mn_log_loss))\n\n\n# rf_final_fit |&gt; collect_metrics()\n\n\n\nFinal Model Selection"
  }
]